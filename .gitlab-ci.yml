---
stages:
  - unit_test
  - integration
  - commit

go_test:
  stage: unit_test
  image: golang:1.19
  script:
    - go build ./...
    - go test -v -race ./...
    - if gofmt -d . | grep . ; then false ; else true ; fi

qemu_test:
  stage: integration
  image: debian:stable
  before_script:
    - apt update
    - apt install -qqy git golang-1.19 python3 qemu-system-x86 curl jq openssh-client
    - apt install -qqy --no-install-recommends python3-pip
    - pip install --break-system-packages --user virt-firmware
    - export PATH=/usr/lib/go-1.19/bin:$PATH
    - export PATH=$PATH:$HOME/.local/bin/
  script:
    - ./integration/qemu.sh
  artifacts:
    when: always
    paths:
    - ./integration/saved/

# Run tests with HEAD stboot, to detect any breaking changes. One
# complication is that existence of a go.work file interacts badly
# with building u-root itself and with u-root's building of included
# commands. Instead, we create a go.work.local file, and point to it
# via the GOWORK environment variable; that way, it can be enabled
# only when building stprov, and disabled for u-root.
qemu_head_stboot_test:
  stage: integration
  image: debian:stable
  allow_failure: true
  before_script:
    - apt update
    - apt install -qqy git golang-1.19 python3 qemu-system-x86 curl jq openssh-client
    - apt install -qqy --no-install-recommends python3-pip
    - pip install --break-system-packages --user virt-firmware
    - export PATH=/usr/lib/go-1.19/bin:$PATH
    - export PATH=$PATH:$HOME/.local/bin/
    - git clone https://git.glasklar.is/system-transparency/core/stboot.git
    - go work init && go work use . ./stboot && mv go.work go.work.local
  script:
    - GOWORK=$(pwd)/go.work.local ./integration/qemu.sh
  artifacts:
    when: always
    paths:
    - ./integration/saved/

commitlint:
  stage: commit
  image: node:alpine
  before_script:
    - apk add --no-cache git
    - npm install --save-dev @commitlint/config-conventional @commitlint/cli
  script:
    - git fetch origin "${CI_MERGE_REQUEST_TARGET_BRANCH_NAME:=main}"
    - base_commit_id="$(git merge-base HEAD "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME")"
    - commit_ids=$(git rev-list --no-merges "$base_commit_id"..)
    - for commit_id in $commit_ids; do git log --format=%B -n1 "$commit_id" | npx commitlint; done
